const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const dotenv = require('dotenv');
const axios = require('axios');
const path = require('path');

// Environment deÄŸiÅŸkenlerini yÃ¼kle - .env dosyasÄ±nÄ±n tam yolunu belirt
dotenv.config({ path: path.join(__dirname, '.env') });

// Groq API konfigÃ¼rasyonu
const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';
const GROQ_API_KEY = process.env.GROQ_API_KEY;

console.log('Environment variables loaded:');
console.log('GROQ_API_KEY from env exists:', !!process.env.GROQ_API_KEY);
console.log('GROQ_API_KEY final value exists:', !!GROQ_API_KEY);
console.log('GROQ_API_KEY starts with gsk_:', GROQ_API_KEY?.startsWith('gsk_'));
console.log('PORT:', process.env.PORT);
console.log('NODE_ENV:', process.env.NODE_ENV);

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware'ler
app.use(helmet()); // GÃ¼venlik headers'larÄ±
app.use(cors()); // CORS politikasÄ±
app.use(express.json({ limit: '10mb' })); // JSON parser

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'Chatbot API Ã§alÄ±ÅŸÄ±yor',
    timestamp: new Date().toISOString()
  });
});

// Chat endpoint - Ana AI sohbet fonksiyonu
app.post('/api/chat', async (req, res) => {
  try {
    const { message, history = [] } = req.body;

    // GiriÅŸ validasyonu
    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      return res.status(400).json({
        error: 'GeÃ§erli bir mesaj gÃ¶ndermelisiniz.',
        code: 'INVALID_MESSAGE'
      });
    }

    // API key kontrolÃ¼
    if (!GROQ_API_KEY || GROQ_API_KEY === '') {
      return res.status(500).json({
        error: 'Groq API anahtarÄ± yapÄ±landÄ±rÄ±lmamÄ±ÅŸ. LÃ¼tfen GROQ_API_KEY environment variable\'Ä±nÄ± ayarlayÄ±n.',
        code: 'MISSING_API_KEY'
      });
    }

    // Sohbet geÃ§miÅŸini OpenAI uyumlu formata Ã§evir
    const messages = [
      {
        role: 'system',
        content: 'Sen yardÄ±msever, bilgili ve dostane bir AI asistanÄ±sÄ±n. KullanÄ±cÄ±lara TÃ¼rkÃ§e olarak net, anlaÅŸÄ±lÄ±r ve faydalÄ± yanÄ±tlar veriyorsun. SorularÄ±nÄ± nazikÃ§e yanÄ±tla ve gerektiÄŸinde detaylÄ± aÃ§Ä±klamalar yap. CevaplarÄ±nÄ± mÃ¼mkÃ¼n olduÄŸunca kÄ±sa ve Ã¶z tut.'
      },
      // GeÃ§miÅŸ mesajlarÄ± ekle (son 10 mesajÄ± al)
      ...history.slice(-10).map(msg => ({
        role: msg.sender === 'user' ? 'user' : 'assistant',
        content: msg.text
      })),
      // Yeni mesajÄ± ekle
      {
        role: 'user',
        content: message.trim()
      }
    ];

    console.log('Groq API\'ye istek gÃ¶nderiliyor...', {
      url: GROQ_API_URL,
      keyStart: GROQ_API_KEY.substring(0, 10) + '...',
      messageCount: messages.length
    });

    // Groq API Ã§aÄŸrÄ±sÄ±
    const response = await axios.post(GROQ_API_URL, {
      model: 'llama-3.1-8b-instant',
      messages: messages,
      max_tokens: 1000,
      temperature: 0.7,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
      stream: false
    }, {
      headers: {
        'Authorization': `Bearer ${GROQ_API_KEY}`,
        'Content-Type': 'application/json',
        'User-Agent': 'ChatbotApp/1.0'
      },
      timeout: 30000,
      validateStatus: function (status) {
        return status < 500; // 500'den kÃ¼Ã§Ã¼k tÃ¼m status kodlarÄ±nÄ± baÅŸarÄ±lÄ± say
      }
    });

    console.log('Groq API yanÄ±tÄ±:', {
      status: response.status,
      statusText: response.statusText,
      data: response.data
    });

    // YanÄ±t kontrolÃ¼
    if (response.status === 401) {
      console.error('401 Unauthorized - API key geÃ§ersiz:', GROQ_API_KEY.substring(0, 10) + '...');
      return res.status(401).json({
        error: 'Groq API anahtarÄ± geÃ§ersiz. LÃ¼tfen yeni bir API key alÄ±n.',
        code: 'INVALID_API_KEY',
        details: 'API key format: gsk_...'
      });
    }

    if (response.status === 429) {
      return res.status(429).json({
        error: 'Ã‡ok fazla istek gÃ¶nderildi. LÃ¼tfen biraz bekleyin.',
        code: 'RATE_LIMIT'
      });
    }

    if (response.status >= 400) {
      console.error('Groq API hatasÄ±:', response.status, response.data);
      return res.status(response.status).json({
        error: `API hatasÄ±: ${response.data.error?.message || 'Bilinmeyen hata'}`,
        code: 'API_ERROR'
      });
    }

    // YanÄ±tÄ± al
    const aiResponse = response.data.choices?.[0]?.message?.content;

    if (!aiResponse) {
      console.error('Groq\'tan geÃ§ersiz yanÄ±t:', response.data);
      throw new Error('Groq\'tan geÃ§erli bir yanÄ±t alÄ±namadÄ±');
    }

    // BaÅŸarÄ±lÄ± yanÄ±t
    res.json({
      success: true,
      response: aiResponse.trim(),
      timestamp: new Date().toISOString(),
      usage: response.data.usage || {
        model: "llama-3.1-8b-instant",
        prompt_tokens: message.length,
        completion_tokens: aiResponse.length,
        total_tokens: message.length + aiResponse.length
      }
    });

  } catch (error) {
    console.error('Chat API HatasÄ±:', error);

    // Hata tÃ¼rÃ¼ne gÃ¶re yanÄ±t ver
    if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {
      return res.status(408).json({
        error: 'Ä°stek zaman aÅŸÄ±mÄ±na uÄŸradÄ±. LÃ¼tfen tekrar deneyin.',
        code: 'TIMEOUT'
      });
    }

    if (error.response?.status === 401) {
      return res.status(401).json({
        error: 'Groq API anahtarÄ± geÃ§ersiz veya sÃ¼resi dolmuÅŸ.',
        code: 'INVALID_API_KEY'
      });
    }

    if (error.response?.status === 429) {
      return res.status(429).json({
        error: 'API kullanÄ±m limitiniz dolmuÅŸ. LÃ¼tfen daha sonra tekrar deneyin.',
        code: 'QUOTA_EXCEEDED'
      });
    }

    // Genel hata
    res.status(500).json({
      error: 'Chatbot\'ta bir hata oluÅŸtu. LÃ¼tfen tekrar deneyin.',
      code: 'INTERNAL_ERROR',
      message: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Endpoint bulunamadÄ±.',
    code: 'NOT_FOUND'
  });
});

// Global hata yakalayÄ±cÄ±
app.use((error, req, res, next) => {
  console.error('Beklenmeyen hata:', error);
  res.status(500).json({
    error: 'Sunucu hatasÄ± oluÅŸtu.',
    code: 'SERVER_ERROR'
  });
});

// Sunucuyu baÅŸlat
app.listen(PORT, () => {
  console.log(`ðŸš€ Chatbot API ${PORT} portunda Ã§alÄ±ÅŸÄ±yor`);
  console.log(`ðŸ“¡ Health check: http://localhost:${PORT}/health`);
  console.log(`ðŸ’¬ Chat endpoint: http://localhost:${PORT}/api/chat`);
});
